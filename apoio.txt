\/\/\/\/\/\/\/\/\/\/\/\/\/ESBOÇO ANDREY\/\/\/\/\/\/\/\/\/\/\/\/\/\/
def somartudo(att):
    att = float(data[att]) or 0 #atributo base(fixo)
    eqp = float(data1[att]) or 0 #equipamento(fixo)
    mis = float(data2[att]) or 0 #missao(fixo)
    ace = float(data8[att]) or 0 #acessorio
    maes = float(data3[att]) or 0  #maestria(%)
    raca = float[data4[att]] or 0 #raca(%)
    divin # bonus divino
    clanfixo 
    clanper
    habpass = float[data5[att]] or 0 #habilidades(%) (a soma de todas as habilidades que buffam)
    habafix  #habilidade ativa que da valor fixo
    habaper  #habilidade ativa que da valor percentual
    bep = float[data6[att]] or 0 #buff externo %
    bef = float[data7[att]] or 0 #buff externo fixo
    resultado = []

    soma1 = att + eqp + mis + ace + clanfixo
    soma2 = soma1 + soma1 * (maes + raca + habpas + divin + clanper) / 100
    resultado.append(soma2 + soma2 * (habafix) / 100) 
    resultado.append(soma2 + soma2 * (habapor) / 100) 
    resultado.append(soma2 + soma2 * (bep) / 100) 
    resultado.append(soma2 + soma2 * (bef) / 100) 
    if bfi > 0:
        bfi + resultado/2 
        resultado
    else:
        return resultado

    tev 20% + pru 30%/2 
    tev 100 + 15

    return max(lista)

Condição para atributos e tipos
    attv = ['forca', 'destreza', 'inteligencia', 'determinacao', 'percepcao', 'carisma']  aonde attv é: atributo para verificar
    if any(palavra in k for palavra in attv) # acho verifica quais são as palavras para  filtrar(attv) e ira verificar na 'k'ey se a palavra existe
    ex 'forca' in k?  a força vem do loop attv
       'destreza' in K
       'inteligencia' in k
       for palavra in attv:
           if palavra in k: 

    ##############################################################
    é possivel transformar classes em dicionarios 

funçao que talvez funcione para qualquer soma dos itens do mesmo conjunto
def somarConj(self, escolha):
    listsoma = []
    for k, v in asdict(self).items:
        if v == 'att': # att pode ser substituido por def, amp, etc...
            listsoma.append(v[escolha])
    return sum(listsoma)

\/\/\/\/\/\/\/\/\/\/\/\/\/ESBOÇO ARIEL\/\/\/\/\/\/\/\/\/\/\/\/\/\/

    function alterar() {
    // Definindo categorias de inputs em arrays
    const atributos = ['forca', 'destreza', 'inteligencia', 'determinacao', 'percepcao', 'carisma'];
    
    // Objeto para armazenar os valores dos inputs
    const valores = {};

    // Função para iterar e obter os valores dos inputs
    const obterValores = (array) => {
        array.forEach((id) => {
            valores[id] = parseFloat(document.getElementById(id).value) || 0;
        });
    };

    // Chamando a função para obter os valores de cada categoria
    obterValores(atributos);
    
    // Enviando os dados para o servidor
    fetch('/atrstatus', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(valores)
    })

<label id="valorLabel">Elmo: <span id="valorNumerico">10</span></label>
<input type="number" id="inputNumero" oninput="atualizarLabel(this.value)">

function atualizarLabel(novoValor) {
    // Atualiza o texto dentro da label com o novo valor
    document.getElementById('valorNumerico').textContent = novoValor;
}

    #############################LEMBRETES#################################

    Ideia para banco de dados:
        uma tabela de jogadores que tera o registro simples de quais pessoas se cadastraram , e uma tabela
    de personagens que tera todas as informações do personagem, uma tabela pode ter relação com a outra
        um |jogador| pode ter varios |personagens| porem o personagem só pode estar 
    relaciona a um jogador(modelo relacional muitos para um)

    Andrey: tornar possivel a criação das classe sem valores e depois adicionar uma função que permita de forma mais agilizada de atribuir esse valores para as classes
    com um "for k, v in data.values" colocando a condição de distribução comparando através de letras contidas no nome (dar uma atenção especial para poucas letras como por
    exemplo "forcaE") uma forma disso ser feita é condicionando as chaves como citado no esboço
    Lembrar de iniciar as classes.
    
    Ariel: Adicionar os campos de raça, habilidades,  bonus externo (fixo e %) e benção divina, grimorio.
    ideia de ID's para os campos html
    arma:
    tipo1pAp (tipo = tipo de dano, p = penetração, AP = Arma principal)
    tipo2pAp
    tipo3pAp
    tipo1aAp (tipo = tipo de dano, a = amplificação, AP = Arma principal)
    tipo2aAp
    tipo3aAp
    etc...





pros animais colocar um campo especifico para ele dizer os tipos de defesa que ele tem, depois os outros campos de defesa
serão atualizado automaticamente com as defesas especificas


    manter elementos, atributos, os conjuntos
    mesclar todo resto para ter elementos atrinutos

    mesclar arma com equipamento
    mesclar raca missoes, raca

    as classes existentes serao, elementos, atributos,
    propriedaes(contera a informaçao necessaria para armas, equipamentos, acessorios e informações do personagem) e
    conj armadura, conjacessorio, conjmaestria, talvez armasemmaos

    arrumar o calculo da soma de todos os atributos