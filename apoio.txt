def somartudo(att):
    att = float(data[att]) or 0 #atributo base(fixo)
    eqp = float(data1[att]) or 0 #equipamento(fixo)
    mis = float(data2[att]) or 0 #missao(fixo)
    ace = float(data8[att]) or 0 #
    maes = float(data3[att]) or 0  #maestria(%)
    raca = float[data4[att]] or 0 #raca(%)
    hab = float[data5[att]] or 0 #habilidades(%) (a soma de todas as habilidades que buffam)
    bep = float[data6[att]] or 0 #buff externo %
    bef = float[data7[att]] or 0 #buff externo fixo

    soma1 = att + eqp + mis + ace
    soma2 = soma1 + soma1 * (maes + raca) / 100
    soma3 = soma2 + soma2 * hab / 100
    extpor = floor(soma3 + soma3 * bep)
    extfix = floor(soma3 + soma3 * bef)
    if extfix >= expor:
        final = extfix
    else:
        final = extpor
    return final

    ##############################################################
    é possivel transformar classes em dicionarios 

funçao que talvez funcione para qualquer soma dos itens do mesmo conjunto
def somarConj(self, escolha):
    listsoma = []
    for k, v in asdict(self).items:
        if v == 'att': # att pode ser substituido por def, amp, etc...
            listsoma.append(v[escolha])
    return sum(listsoma)



    ##############################################################

    TERCA FEIRA

    Andrey: Criar classe para as armas, e a clase arma que tem a variavel se é primaria ou não
    
    Ariel: Fazer ajuste no status base do personagem, adicionar os campos de maestria e missão fixos.
    