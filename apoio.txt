def somartudo(att):
    att = float(data[att]) or 0 #atributo base(fixo)
    eqp = float(data1[att]) or 0 #equipamento(fixo)
    mis = float(data2[att]) or 0 #missao(fixo)
    ace = float(data8[att]) or 0 #acessorio
    maes = float(data3[att]) or 0  #maestria(%)
    raca = float[data4[att]] or 0 #raca(%)
    divin # bonus divino
    clanfixo 
    clanper
    habpass = float[data5[att]] or 0 #habilidades(%) (a soma de todas as habilidades que buffam)
    habafix  #habilidade ativa que da valor fixo
    habaper  #habilidade ativa que da valor percentual
    bep = float[data6[att]] or 0 #buff externo %
    bef = float[data7[att]] or 0 #buff externo fixo
    resultado = []

    soma1 = att + eqp + mis + ace + clanfixo
    soma2 = soma1 + soma1 * (maes + raca + habpas + divin + clanper) / 100
    resultado.append(soma2 + soma2 * (habafix) / 100) 
    resultado.append(soma2 + soma2 * (habapor) / 100) 
    resultado.append(soma2 + soma2 * (bep) / 100) 
    resultado.append(soma2 + soma2 * (bef) / 100) 

    return max(lista)

    ##############################################################
    é possivel transformar classes em dicionarios 

funçao que talvez funcione para qualquer soma dos itens do mesmo conjunto
def somarConj(self, escolha):
    listsoma = []
    for k, v in asdict(self).items:
        if v == 'att': # att pode ser substituido por def, amp, etc...
            listsoma.append(v[escolha])
    return sum(listsoma)



    ##############################################################

    TERCA FEIRA

    Andrey: 
    
    Ariel: Adicionar os campos de raça, habilidades,  bonus externo (fixo e %) e benção divina, grimorio.





    function alterar() {
    // Definindo categorias de inputs em arrays
    const atributos = ['forca', 'destreza', 'inteligencia', 'determinacao', 'percepcao', 'carisma'];
    
    // Objeto para armazenar os valores dos inputs
    const valores = {};

    // Função para iterar e obter os valores dos inputs
    const obterValores = (array) => {
        array.forEach((id) => {
            valores[id] = parseFloat(document.getElementById(id).value) || 0;
        });
    };

    // Chamando a função para obter os valores de cada categoria
    obterValores(atributos);
    
    // Enviando os dados para o servidor
    fetch('/atrstatus', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(valores)
    })

<label id="valorLabel">Elmo: <span id="valorNumerico">10</span></label>
<input type="number" id="inputNumero" oninput="atualizarLabel(this.value)">

function atualizarLabel(novoValor) {
    // Atualiza o texto dentro da label com o novo valor
    document.getElementById('valorNumerico').textContent = novoValor;
}

